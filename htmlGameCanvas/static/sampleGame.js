!function(){console.log("Loading window.sampleGame..."),window.sampleGame=this,this.gameApi=void 0,this.init=gameApi=>{this.gameApi=gameApi,this.initControls(),this.initLayers(),console.log("...sampleGame initialized")},this.keyLeft=37,this.keyUp=38,this.keyRight=39,this.keyDown=40,this.keySpace=32,this.keyEnter=13,this.keyEsc=27,this.initControls=()=>{this.gameApi.keys([this.keyUp,this.keyDown,this.keyLeft,this.keyRight]),this.gameApi.inputCallback(this.handleKeypress),console.log("Setup controls for game canvas engine = "+JSON.stringify(this.gameApi.config().input.keys))},this.initLayers=()=>{const width=this.gameApi.config().canvas.width=1333,height=this.gameApi.config().canvas.height=720;console.log("Width/Height for game canvas engine = "+width+":"+height);for(i=0;i<400;i++){const layer={think:this.thinkLayer,render:this.renderLayer,data:{id:i,posX:i,posY:i,sizeX:this.gameApi.random(50)+10,sizeY:this.gameApi.random(50)+10,moveX:(1+i)%7,moveY:(4+i)%7,minX:0,maxX:width,minY:0,maxY:height,color:"blue",expires:this.gameApi.random(2100)+1}};this.gameApi.addLayer(layer),console.log("Adding object to html game canvas engine")}},this.handleKeypress=keys=>{const keypress=keys.at(0)||-1;console.log("Handling keypress: "+keypress),keypress===this.keyUp?(console.log("keypress: renderCycleType = frame"),this.gameApi.config().canvas.renderCycleType="frame"):keypress===this.keyDown?(console.log("keypress: renderCycleType = timer"),this.gameApi.config().canvas.renderCycleType="timer"):keypress===this.keyRight?!1===this.gameApi.config().active&&(console.log("keypress: startGame"),this.gameApi.startGame()):keypress===this.keyLeft&&!0===this.gameApi.config().active&&(console.log("keypress: stopGame"),this.gameApi.stopGame()),console.log("Handled keypress: "+keypress)},this.thinkLayer=(idx,count,data)=>{data.posX+=data.moveX,data.posX+data.sizeX>=data.maxX?(data.posX=data.maxX-data.sizeX,data.moveX*=-1,data.color="blue"):data.posX<=data.minX&&(data.posX=data.minX,data.moveX*=-1,data.color="green"),data.posY+=data.moveY,data.posY+data.sizeY>=data.maxY?(data.posY=data.maxY-data.sizeY,data.moveY*=-1,data.color="red"):data.posY<=data.minY&&(data.posY=data.minY,data.moveY*=-1,data.color="white"),data.expires>0&&data.expires<count&&this.gameApi.removeLayer(idx),count>2e3&&this.gameApi.stopGame()},this.renderLayer=(idx,count,data,ctx)=>{ctx.fillStyle=data.color;const midX=data.sizeX/2,midY=data.sizeY/2,thirdX=data.sizeX/3;data.sizeY;switch(data.id%4){case 0:this.gameApi.drawUtil({type:"rect",c:data.color,x:data.posX,y:data.posY,dx:data.sizeX,dy:data.sizeY});break;case 1:this.gameApi.drawUtil({type:"ellipse",c:data.color,x:data.posX,y:data.posY,mx:midX,my:midY});break;case 2:let trianglePath=[];trianglePath=midX>midY?[{x:data.posX,y:data.posY},{x:data.posX+data.sizeX,y:data.posY},{x:data.posX+midX,y:data.posY+data.sizeY}]:[{x:data.posX,y:data.posY+data.sizeY},{x:data.posX+data.sizeX,y:data.posY+data.sizeY},{x:data.posX+midX,y:data.posY}],this.gameApi.drawUtil({type:"path",c:data.color,path:trianglePath});break;case 3:this.gameApi.drawUtil({type:"path",c:data.color,path:[{x:data.posX+thirdX,y:data.posY},{x:data.posX+data.sizeX-thirdX,y:data.posY},{x:data.posX+data.sizeX,y:data.posY+midY},{x:data.posX+data.sizeX-thirdX,y:data.posY+data.sizeY},{x:data.posX+thirdX,y:data.posY+data.sizeY},{x:data.posX,y:data.posY+midY}]})}}}();